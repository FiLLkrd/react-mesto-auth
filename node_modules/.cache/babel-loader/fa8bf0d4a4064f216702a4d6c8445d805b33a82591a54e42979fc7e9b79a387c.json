{"ast":null,"code":"class API {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n  _checkError(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n  async getUserInfo() {\n    const res = await fetch(`${this._baseUrl}/users/me`, {\n      method: \"GET\",\n      headers: this._headers\n    });\n    return this._checkError(res);\n  }\n  async getCards() {\n    const res = await fetch(`${this._baseUrl}/cards`, {\n      method: \"GET\",\n      headers: this._headers\n    });\n    return this._checkError(res);\n  }\n  async editProfile(data) {\n    const res = await fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    });\n    return this._checkError(res);\n  }\n  async addNewCard(data) {\n    const res = await fetch(`${this._baseUrl}/cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.title,\n        link: data.link\n      })\n    });\n    return this._checkError(res);\n  }\n  async deleteCard(id) {\n    const res = await fetch(`${this._baseUrl}/cards/${id}`, {\n      method: \"DELETE\",\n      headers: this._headers\n    });\n    return this._checkError(res);\n  }\n  async editAvatar(data) {\n    const res = await fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: link\n      })\n    });\n    return this._checkError(res);\n  }\n  async changeLikeCard(cardId, liked) {\n    if (liked) {\n      const res = await fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n        method: \"PUT\",\n        headers: this._headers\n      });\n      return this._checkError(res);\n    } else {\n      const res_2 = await fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n        method: \"DELETE\",\n        headers: this._headers\n      });\n      return this._checkError(res_2);\n    }\n  }\n}\nconst api = new API({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-56',\n  headers: {\n    authorization: '5dc5c8be-be79-400a-b4fa-a8894eb1d6c6',\n    'Content-type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"names":["API","constructor","baseUrl","headers","_baseUrl","_headers","_checkError","res","ok","json","Promise","reject","status","getUserInfo","fetch","method","getCards","editProfile","data","body","JSON","stringify","name","about","addNewCard","title","link","deleteCard","id","editAvatar","avatar","changeLikeCard","cardId","liked","res_2","api","authorization"],"sources":["/Users/maksimantonov/mesto-react/src/utils/api.js"],"sourcesContent":["class API {\n    constructor({baseUrl, headers}){\n        this._baseUrl = baseUrl;\n        this._headers = headers;\n    }\n\n    _checkError(res){\n        if(res.ok){\n            return res.json();\n        }\n        return Promise.reject(`Ошибка: ${res.status}`);\n    }\n\n    async getUserInfo(){\n        const res = await fetch(`${this._baseUrl}/users/me`, {\n            method: \"GET\",\n            headers: this._headers\n        });\n        return this._checkError(res);\n    }\n\n    async getCards(){\n        const res = await fetch(`${this._baseUrl}/cards`, {\n            method: \"GET\",\n            headers: this._headers\n        });\n        return this._checkError(res);\n    }\n\n    async editProfile(data){\n        const res = await fetch(`${this._baseUrl}/users/me`, {\n            method: \"PATCH\",\n            headers: this._headers,\n            body: JSON.stringify({\n                name: data.name,\n                about: data.about\n            })\n        });\n        return this._checkError(res);\n    }\n\n    async addNewCard(data){\n        const res = await fetch(`${this._baseUrl}/cards`, {\n            method: \"POST\",\n            headers: this._headers,\n            body: JSON.stringify({\n                name: data.title,\n                link: data.link,\n            })\n        });\n        return this._checkError(res);\n    }\n\n    async deleteCard(id){\n        const res = await fetch(`${this._baseUrl}/cards/${id}`, {\n            method: \"DELETE\",\n            headers: this._headers\n        });\n        return this._checkError(res);\n    }\n\n    async editAvatar(data){\n        const res = await fetch(`${this._baseUrl}/users/me/avatar`, {\n            method: \"PATCH\",\n            headers: this._headers,\n            body: JSON.stringify({\n                avatar: link,\n            })\n        });\n        return this._checkError(res);\n    }\n\n    async changeLikeCard(cardId, liked) {\n        if (liked) {\n            const res = await fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n                method: \"PUT\",\n                headers: this._headers,\n            });\n            return this._checkError(res);\n        } else {\n            const res_2 = await fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n                method: \"DELETE\",\n                headers: this._headers,\n            });\n            return this._checkError(res_2);\n        }\n    }\n}\n\nconst api = new API({\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-56',\n    headers: {\n      authorization: '5dc5c8be-be79-400a-b4fa-a8894eb1d6c6',\n      'Content-type': 'application/json',\n    },\n  });\n\n  export default api;"],"mappings":"AAAA,MAAMA,GAAG,CAAC;EACNC,WAAW,OAAoB;IAAA,IAAnB;MAACC,OAAO;MAAEC;IAAO,CAAC;IAC1B,IAAI,CAACC,QAAQ,GAAGF,OAAO;IACvB,IAAI,CAACG,QAAQ,GAAGF,OAAO;EAC3B;EAEAG,WAAW,CAACC,GAAG,EAAC;IACZ,IAAGA,GAAG,CAACC,EAAE,EAAC;MACN,OAAOD,GAAG,CAACE,IAAI,EAAE;IACrB;IACA,OAAOC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAAC;EAClD;EAEA,MAAMC,WAAW,GAAE;IACf,MAAMN,GAAG,GAAG,MAAMO,KAAK,CAAE,GAAE,IAAI,CAACV,QAAS,WAAU,EAAE;MACjDW,MAAM,EAAE,KAAK;MACbZ,OAAO,EAAE,IAAI,CAACE;IAClB,CAAC,CAAC;IACF,OAAO,IAAI,CAACC,WAAW,CAACC,GAAG,CAAC;EAChC;EAEA,MAAMS,QAAQ,GAAE;IACZ,MAAMT,GAAG,GAAG,MAAMO,KAAK,CAAE,GAAE,IAAI,CAACV,QAAS,QAAO,EAAE;MAC9CW,MAAM,EAAE,KAAK;MACbZ,OAAO,EAAE,IAAI,CAACE;IAClB,CAAC,CAAC;IACF,OAAO,IAAI,CAACC,WAAW,CAACC,GAAG,CAAC;EAChC;EAEA,MAAMU,WAAW,CAACC,IAAI,EAAC;IACnB,MAAMX,GAAG,GAAG,MAAMO,KAAK,CAAE,GAAE,IAAI,CAACV,QAAS,WAAU,EAAE;MACjDW,MAAM,EAAE,OAAO;MACfZ,OAAO,EAAE,IAAI,CAACE,QAAQ;MACtBc,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBC,IAAI,EAAEJ,IAAI,CAACI,IAAI;QACfC,KAAK,EAAEL,IAAI,CAACK;MAChB,CAAC;IACL,CAAC,CAAC;IACF,OAAO,IAAI,CAACjB,WAAW,CAACC,GAAG,CAAC;EAChC;EAEA,MAAMiB,UAAU,CAACN,IAAI,EAAC;IAClB,MAAMX,GAAG,GAAG,MAAMO,KAAK,CAAE,GAAE,IAAI,CAACV,QAAS,QAAO,EAAE;MAC9CW,MAAM,EAAE,MAAM;MACdZ,OAAO,EAAE,IAAI,CAACE,QAAQ;MACtBc,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBC,IAAI,EAAEJ,IAAI,CAACO,KAAK;QAChBC,IAAI,EAAER,IAAI,CAACQ;MACf,CAAC;IACL,CAAC,CAAC;IACF,OAAO,IAAI,CAACpB,WAAW,CAACC,GAAG,CAAC;EAChC;EAEA,MAAMoB,UAAU,CAACC,EAAE,EAAC;IAChB,MAAMrB,GAAG,GAAG,MAAMO,KAAK,CAAE,GAAE,IAAI,CAACV,QAAS,UAASwB,EAAG,EAAC,EAAE;MACpDb,MAAM,EAAE,QAAQ;MAChBZ,OAAO,EAAE,IAAI,CAACE;IAClB,CAAC,CAAC;IACF,OAAO,IAAI,CAACC,WAAW,CAACC,GAAG,CAAC;EAChC;EAEA,MAAMsB,UAAU,CAACX,IAAI,EAAC;IAClB,MAAMX,GAAG,GAAG,MAAMO,KAAK,CAAE,GAAE,IAAI,CAACV,QAAS,kBAAiB,EAAE;MACxDW,MAAM,EAAE,OAAO;MACfZ,OAAO,EAAE,IAAI,CAACE,QAAQ;MACtBc,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjBS,MAAM,EAAEJ;MACZ,CAAC;IACL,CAAC,CAAC;IACF,OAAO,IAAI,CAACpB,WAAW,CAACC,GAAG,CAAC;EAChC;EAEA,MAAMwB,cAAc,CAACC,MAAM,EAAEC,KAAK,EAAE;IAChC,IAAIA,KAAK,EAAE;MACP,MAAM1B,GAAG,GAAG,MAAMO,KAAK,CAAE,GAAE,IAAI,CAACV,QAAS,UAAS4B,MAAO,QAAO,EAAE;QAC9DjB,MAAM,EAAE,KAAK;QACbZ,OAAO,EAAE,IAAI,CAACE;MAClB,CAAC,CAAC;MACF,OAAO,IAAI,CAACC,WAAW,CAACC,GAAG,CAAC;IAChC,CAAC,MAAM;MACH,MAAM2B,KAAK,GAAG,MAAMpB,KAAK,CAAE,GAAE,IAAI,CAACV,QAAS,UAAS4B,MAAO,QAAO,EAAE;QAChEjB,MAAM,EAAE,QAAQ;QAChBZ,OAAO,EAAE,IAAI,CAACE;MAClB,CAAC,CAAC;MACF,OAAO,IAAI,CAACC,WAAW,CAAC4B,KAAK,CAAC;IAClC;EACJ;AACJ;AAEA,MAAMC,GAAG,GAAG,IAAInC,GAAG,CAAC;EAChBE,OAAO,EAAE,6CAA6C;EACtDC,OAAO,EAAE;IACPiC,aAAa,EAAE,sCAAsC;IACrD,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEF,eAAeD,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}