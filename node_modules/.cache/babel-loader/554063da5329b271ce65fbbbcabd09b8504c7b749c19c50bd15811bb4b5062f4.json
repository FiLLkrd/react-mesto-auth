{"ast":null,"code":"class API {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n  _checkError(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n  async getUserInfo() {\n    const res = await fetch(`${this._baseUrl}/users/me`, {\n      method: \"GET\",\n      headers: this._headers\n    });\n    return this._checkError(res);\n  }\n  async getCards() {\n    const res = await fetch(`${this._baseUrl}/cards`, {\n      method: \"GET\",\n      headers: this._headers\n    });\n    return this._checkError(res);\n  }\n  async editProfile(data) {\n    const res = await fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n    });\n    return this._checkError(res);\n  }\n  async addNewCard(data) {\n    const res = await fetch(`${this._baseUrl}/cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.title,\n        link: data.link\n      })\n    });\n    return this._checkError(res);\n  }\n  async deleteCard(id) {\n    const res = await fetch(`${this._baseUrl}/cards/${id}`, {\n      method: \"DELETE\",\n      headers: this._headers\n    });\n    return this._checkError(res);\n  }\n  async editAvatar(link) {\n    const res = await fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: link\n      })\n    });\n    return this._checkError(res);\n  }\n  async changeLikeCard(cardId, liked) {\n    if (liked) {\n      const res = await fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n        method: \"PUT\",\n        headers: this._headers\n      });\n      return this._checkError(res);\n    } else {\n      const res_2 = await fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n        method: \"DELETE\",\n        headers: this._headers\n      });\n      return this._checkError(res_2);\n    }\n  }\n}\nconst apiMethod = new API({\n  baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-56\",\n  headers: {\n    authorization: \"5dc5c8be-be79-400a-b4fa-a8894eb1d6c6\",\n    \"Content-type\": \"application/json\"\n  }\n});\nexport default api;","map":{"version":3,"names":["API","constructor","baseUrl","headers","_baseUrl","_headers","_checkError","res","ok","json","Promise","reject","status","getUserInfo","fetch","method","getCards","editProfile","data","body","JSON","stringify","name","about","addNewCard","title","link","deleteCard","id","editAvatar","avatar","changeLikeCard","cardId","liked","res_2","apiMethod","authorization","api"],"sources":["/Users/maksimantonov/mesto-react/src/utils/api.js"],"sourcesContent":["class API {\n  constructor({ baseUrl, headers }) {\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n  }\n\n  _checkError(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  async getUserInfo() {\n    const res = await fetch(`${this._baseUrl}/users/me`, {\n      method: \"GET\",\n      headers: this._headers,\n    });\n    return this._checkError(res);\n  }\n\n  async getCards() {\n    const res = await fetch(`${this._baseUrl}/cards`, {\n      method: \"GET\",\n      headers: this._headers,\n    });\n    return this._checkError(res);\n  }\n\n  async editProfile(data) {\n    const res = await fetch(`${this._baseUrl}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about,\n      }),\n    });\n    return this._checkError(res);\n  }\n\n  async addNewCard(data) {\n    const res = await fetch(`${this._baseUrl}/cards`, {\n      method: \"POST\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.title,\n        link: data.link,\n      }),\n    });\n    return this._checkError(res);\n  }\n\n  async deleteCard(id) {\n    const res = await fetch(`${this._baseUrl}/cards/${id}`, {\n      method: \"DELETE\",\n      headers: this._headers,\n    });\n    return this._checkError(res);\n  }\n\n  async editAvatar(link) {\n    const res = await fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: link,\n      }),\n    });\n    return this._checkError(res);\n  }\n\n  async changeLikeCard(cardId, liked) {\n    if (liked) {\n      const res = await fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n        method: \"PUT\",\n        headers: this._headers,\n      });\n      return this._checkError(res);\n    } else {\n      const res_2 = await fetch(`${this._baseUrl}/cards/${cardId}/likes`, {\n        method: \"DELETE\",\n        headers: this._headers,\n      });\n      return this._checkError(res_2);\n    }\n  }\n}\n\nconst apiMethod = new API({\n  baseUrl: \"https://mesto.nomoreparties.co/v1/cohort-56\",\n  headers: {\n    authorization: \"5dc5c8be-be79-400a-b4fa-a8894eb1d6c6\",\n    \"Content-type\": \"application/json\",\n  },\n});\n\nexport default api;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}